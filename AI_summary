```markdown
PROJECT SUMMARY — SSTV Groundstation Web Interface

Overview:
A Flask-based web interface for an SSTV groundstation project. It provides:
1. A live image gallery for decoded SSTV images.
2. A configuration page to edit `config.json`.
3. A TLE (Two-Line Element) viewer for multiple satellites, with update and cron scheduling features.

Folder Structure (root-level):
sstv-groundstation/
│
├── app/                      # Flask app folder
│   ├── app.py                 # Main Flask application
│   ├── update_all_tles.py     # Script to update all TLE files
│   ├── templates/             # HTML templates
│   │   ├── base.html          # Shared layout with nav menu
│   │   ├── gallery.html       # Image gallery page
│   │   ├── config.html        # Config editor page
│   │   └── tle_view.html      # TLE viewer with update/cron buttons
│   └── static/                # (Optional) CSS/JS
│
├── images/                    # Root-level folder for SSTV images
├── tle/                       # Root-level folder for TLE text files
│   ├── iss.txt
│   ├── noaa19.txt
│   └── metopb.txt
└── config.json                # Config file edited via web UI

Key Features:
1. **Gallery**
   - Scans `images/` (including subfolders) for image files.
   - Displays them in a grid with clickable thumbnails.
   - Path handling fixed to point to root-level `images/`.

2. **Config Page**
   - Reads/writes `config.json` in `app/` folder.
   - Simple form to update key-value pairs.

3. **TLE Viewer**
   - Lists all `.txt` files in `tle/` folder.
   - Shows last updated timestamp and file contents in collapsible sections.
   - Two buttons:
     - **Update All TLEs** → Runs `update_all_tles.py` to fetch latest data from CelesTrak.
     - **Install Cron Job** → Adds a daily cron job (06:00) to run `update_all_tles.py`.

4. **update_all_tles.py**
   - Contains `TLE_SOURCES` dict mapping filenames to CelesTrak URLs.
   - Fetches and saves each TLE file to `tle/`.
   - Can be extended to filter specific satellites from multi-satellite feeds.

5. **Placeholder TLE Management**
   - `/tle/manage` route exists but is not yet implemented.
   - Future plan: Web UI to select/deselect satellites and auto-create/remove TLE files.

Current Routes:
- `/` or `/gallery` → Image gallery
- `/config` → Config editor
- `/tle` → TLE viewer
- `/tle/update-all` (POST) → Update all TLEs
- `/tle/install-cron` (POST) → Install cron job
- `/tle/manage` → Placeholder management page

---

app.py (latest working version):

[full app.py code here — as in your current AI_summary]

---

update_all_tles.py (latest version):

[full update_all_tles.py code here — as in your current AI_summary]

---

templates/base.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}SSTV Groundstation{% endblock %}</title>
    <style>
        body { font-family: Arial, sans-serif; background: #111; color: #eee; margin: 0; padding: 0; }
        nav { background: #222; padding: 10px; }
        nav a { color: #0f0; margin-right: 15px; text-decoration: none; }
        nav a:hover { text-decoration: underline; }
        .container { padding: 20px; }
        button { background: #0f0; color: #000; border: none; padding: 6px 12px; cursor: pointer; }
        button:hover { background: #0c0; }
    </style>
</head>
<body>
    <nav>
        <a href="{{ url_for('gallery') }}">Gallery</a>
        <a href="{{ url_for('config_page') }}">Config</a>
        <a href="{{ url_for('tle_view') }}">TLE Info</a>
        <a href="{{ url_for('tle_manage') }}">TLE Manage</a>
    </nav>
    <div class="container">
        {% block content %}{% endblock %}
    </div>
</body>
</html>

---

templates/gallery.html:

{% extends "base.html" %}

{% block title %}Gallery{% endblock %}

{% block content %}
<h1>Image Gallery</h1>
{% if image_names %}
    <div style="display:flex; flex-wrap:wrap; gap:10px;">
    {% for image in image_names %}
        <div>
            <img src="{{ url_for('serve_image', filename=image) }}" alt="{{ image }}" style="max-width:200px; border:1px solid #444;">
        </div>
    {% endfor %}
    </div>
{% else %}
    <p>No images found in the <code>images/</code> folder.</p>
{% endif %}
{% endblock %}

---

templates/config.html:

{% extends "base.html" %}

{% block title %}Configuration{% endblock %}

{% block content %}
<h1>Configuration</h1>
{% if message %}
    <p style="color:lime;">{{ message }}</p>
{% endif %}
<form method="post">
    {% for key, value in config_data.items() %}
        <label>{{ key }}:</label>
        <input type="text" name="{{ key }}" value="{{ value }}"><br><br>
    {% endfor %}
    <button type="submit">Save</button>
</form>
{% endblock %}

---

templates/tle_view.html:

{% extends "base.html" %}

{% block title %}TLE Information{% endblock %}

{% block content %}
<h1>TLE Files</h1>

<!-- Action buttons -->
<form method="post" action="{{ url_for('update_all_tles') }}" style="display:inline;">
    <button type="submit">Update All TLEs</button>
</form>

<form method="post" action="{{ url_for('install_tle_cron') }}" style="display:inline; margin-left:10px;">
    <button type="submit">Install Cron Job</button>
</form>

<hr>

<!-- TLE file list -->
{% if tle_files %}
    {% for tle in tle_files %}
        <details style="margin-bottom: 1em; background:#1c1c1c; padding:10px; border-radius:6px;">
            <summary style="cursor:pointer; font-size:1.1em; color:#0f0;">
                {{ tle.name }} — Last updated: {{ tle.last_updated }}
            </summary>
            <pre style="margin-top:10px; background:#000; padding:10px; border-radius:6px; color:#0f0;">
{{ tle.contents }}
            </pre>
        </details>
    {% endfor %}
{% else %}
    <p>No TLE files found in the <code>tle/</code> folder.</p>
{% endif %}

<!-- Status message -->
{% if message %}
    <p style="color:lime; margin-top: 1em;">{{ message }}</p>
{% endif %}
{% endblock %}

---

requirements.txt:

flask
requests

---

Quick‑Start Guide:

1. **Clone the repository**  
   ```bash
   git clone https://github.com/<your-username>/sstv-groundstation.git
   cd sstv-groundstation/app
   ```

2. **Create and activate a virtual environment**  
   ```bash
   python3 -m venv ../venv
   source ../venv/bin/activate   # Linux/Mac
   # or
   ..\venv\Scripts\activate      # Windows
   ```

3. **Install dependencies**  
   ```bash
   pip install -r requirements.txt
   ```

4. **Ensure folder structure exists**  
   - `../images/` → for SSTV images (can have subfolders)  
   - `../tle/` → for TLE `.txt` files  
   - `config.json` in `app/` (can be empty `{}` initially)

5. **Run the Flask app**  
   ```bash
   python app.py
   ```
   Access it in your browser at: `http://localhost:5000`

6. **Using the TLE Viewer**  
   - `/tle` → View all `.txt` files in `tle/`  
   - **Update All TLEs** → Fetches latest data from CelesTrak for all satellites in `update_all_tles.py`  
   - **Install Cron Job** → Schedules daily updates at 06:00 (requires system crontab access)

7. **Adding a new satellite**  
   - Edit `update_all_tles.py` → Add a
